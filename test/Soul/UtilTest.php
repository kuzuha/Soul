<?php

namespace Soul;

use PHPUnit_Framework_TestCase;

/**
 * Test class for Util.
 * Generated by PHPUnit on 2011-10-23 at 17:55:58.
 */

class UtilTest extends PHPUnit_Framework_TestCase
{
    /**
     * @test
     */
    public function testTune_up()
    {
        $expected = $app = function($env)
        {
        };

        Util::tune_up($app, array());
        assertSame($expected, $app);

        Util::tune_up($app, array('\\Soul\\Test\\Collaborator\\Mock'));
        assertNotSame($expected, $app);
        assertSame($expected, \Soul\Test\Collaborator\Mock::$_app);
        assertSame(array(), \Soul\Test\Collaborator\Mock::$_options);

        $app = $expected;
        $options = array(1, 2, 3, 4, 5);
        Util::tune_up($app, array('\\Soul\\Test\\Collaborator\\Mock' => $options));
        assertNotSame($expected, $app);
        assertSame($expected, \Soul\Test\Collaborator\Mock::$_app);
        assertSame($options, \Soul\Test\Collaborator\Mock::$_options);
    }

    /**
     * @test
     */
    public function testLoad_phunki()
    {
        /* @var $app Closure */
        $app = Util::load_phunki(__DIR__ . '/UtilTest/test_phunki_1.php');
        assertTrue(is_callable($app));
        assertSame(array(200, array(), 'test1'), $app(array()));

        $app = Util::load_phunki(__DIR__ . '/UtilTest/test_phunki_2.php');
        assertTrue(is_callable($app));
        assertSame(array(200, array(), 'test2'), $app(array()));
    }

    /**
     * @test
     */
    public function testSoul_up()
    {
        ob_start();
        Util::soul_up(__DIR__ . '/UtilTest/test_phunki_1.php', array('handler' => 'Beat'));
        $output = ob_get_clean();
        $expected = "HTTP/1.1 200 OK\r\n\r\n" . "test1";
        assertSame($expected, $output);
    }

    /**
     * @test
     */
    public function test_fix_class_name()
    {
        \assertSame('Soul\\Collaborator\\Foo', Util::_fix_class_name('Foo', 'Soul\\Collaborator'));
        \assertSame('Soul\\Collaborator\\Foo', Util::_fix_class_name('Soul\\Collaborator\\Foo', 'Soul\\Collaborator'));
        \assertSame('\\Foo', Util::_fix_class_name('\\Foo', 'Soul\\Collaborator'));
    }
}

namespace Soul\Test\Collaborator;

class Mock implements \Soul\Collaborator
{
    static $_app;
    static $_options;

    /**
     * @static
     * @param callback $app
     * @param array $options
     * @return callback
     */
    static function collaborate($app, array $options = array())
    {
        self::$_app = $app;
        self::$_options = $options;

        return function($env) use ($app)
        {
            return $app($env);
        };
    }
}
